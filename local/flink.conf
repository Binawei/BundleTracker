application {
    name: "BundleTracker"
    local: "false"
   common
        {
         properties: {

             parallelism: {
                   source: 2
                   sink: 2
                   OutputPayload: 4
                   MultipleOutputOperator: 4
                   JsonObjectConditionalTransformProcessOperator: 4
                   EventStartTimeOperator: 1
                   }
              }
        }
   # source
       # {
          #  name: "json-generator-source"
           # class: "bundle.source.CustomJSONSourceFactory"
            #type: "object"
           # data: "{\"MSISDN\": \"648804414000\", \"ALLOCATION_ID\": \"463\",\"SUBSCRIBER_ID\": \"17696585\",\"ACCOUNT_NO\": \"C0017331\",\"DATA_ALLOCATION\": 12, \"DATA_ACTIVE_IND\": 1,\"VOICE_ALLOCATION\": 12,\"VOICE_ACTIVE_IND\": 1,\"SMS_ALLOCATION\": 12,\"SMS_ACTIVE_IND\": 1,\"NOTIFICATION_ENABLED\": 1,\"NOTIFICATION_STAGE1\": 50,\"NOTIFICATION_STAGE2\": 70,\"NOTIFICATION_STAGE3\": 90,\"HIGH_USAGE_ALERT_NOTIFICATION_IND\": 1,  \"HIGH_USAGE_STAGE\": 100,\"EXCESSIVE_USAGE_ALERT_NOTIFICATION_IND\": 1,\"EXCESSIVE_USAGE_NOTIFICATION_STAGE1\": 350,\"EXCESSIVE_USAGE_NOTIFICATION_STAGE2\": 400,\"EXCESSIVE_USAGE_NOTIFICATION_STAGE3\": 450,\"EMPLOYEE_ACTIVE_IND\": 1,\"Event\": \"New_Optin\"}"
          #  wait_time: 150000
       # }

    source
    {
        name: "kafka-source"
        class: "bundle.source.KafkaSourceFactory"
        topic: "sourceTopic"
        parallelism: { value: 2}
        properties
        {
            group.id: "flink-consumer-group"
            bootstrap.servers: "localhost:9092"
            client.id: "flink-clien"
            auto.offset.reset: "earliest"
            security.protocol: "PLAINTEXT"
            max.poll.interval.ms: "30000"
            session.timeout.ms: "20000"
            isolation.level: "read_committed"
        }
        errors
        {
            passthrough: true
        }
    }


    operators =
        [
         //-------------------------------------------------------------------------------------------------------------------

            {
                        operation: "process"
                        name: "EventTime"
                        class: "bundle.process.EventTimeOperator"
                        start_time_field: "eventStartTime"
                        parallelism {value: ${application.common.properties.parallelism.EventStartTimeOperator}}
                }

            {
                 operation: "process"
                 name: "MultipleOutputOperator"
                 notificationStages: ["NOTIFICATION_STAGE1", "NOTIFICATION_STAGE2", "NOTIFICATION_STAGE3"]
                 excessivenotificationStages: ["EXCESSIVE_USAGE_NOTIFICATION_STAGE1", "EXCESSIVE_USAGE_NOTIFICATION_STAGE2", "EXCESSIVE_USAGE_NOTIFICATION_STAGE3"]
                 bundleTypes: [
                         { type: "DATA", activeInd: "DATA_ACTIVE_IND", allocationField: "DATA_ALLOCATION" },
                         { type: "VOICE", activeInd: "VOICE_ACTIVE_IND", allocationField: "VOICE_ALLOCATION" },
                         { type: "SMS", activeInd: "SMS_ACTIVE_IND", allocationField: "SMS_ALLOCATION" }
                     ]
                 class: "bundle.process.MultipleOutputOperator"
                 parallelism {value: ${application.common.properties.parallelism.MultipleOutputOperator}}
            }
//-------------------------------------------------------------------------------------------------------------------
            {
                operation: "process"
                name: "OutputTransform"
                class: "bundle.process.JsonObjectConditionalTransformProcessOperator"
                resolver.auto.quote: false
                parallelism {value: ${application.common.properties.parallelism.JsonObjectConditionalTransformProcessOperator}}
                transformRules = [
                    # output to be printed format
                    {
                        key: "${/MSISDN}"
                        value: """
                            {
                                "subId": "${/SUBSCRIBER_ID}",
                                "subIdType": "VS",
                                "msisdn":"${/MSISDN}",
                                "paymentType":"C",
                                "campaign": "${/ACCOUNT_NO}",
                                "goalId":"${/goalId}",
                               "expiryDate":"${/eventEndTime}",
                                "type":"Auto",
                                "orderNum": null,
                                "allocation":"${/allocation}",
                                "optinDate":"${/eventStartTime}",
                                "refCode": null,
                                "channel":"CP",
                                "origin":"CP",
                                "externalId":"${/externalId}",
                                "referenceInfo":"${/ALLOCATION_ID}",
                                "eventType" : "${/Event}",
                                "optinType": "${/OptinType}"
                            }

                          """
                       rule
                       {
                          class: "bundle.process.rules.JsonRegexRule"
                          selector: "/alertType"
                          patterns: ["ERROR"]
                          matching: "ANY"
                          missing.policy: "DISCARD"
                       }
                      }

                    # delete event

                      {
                        key: "${/MSISDN}"
                        value: """
                          {
                                "MSISDN": "${/MSISDN}",
                                "AllocationID":"${/ALLOCATION_ID}",
                                "output_topic": "dev.zaf.Vodacom.CVM.Goal_Tracker.OptOut",
                                "SubscriberID":"${/SUBSCRIBER_ID}",
                                "EMPLOYEE_ACTIVE_IND": "${/ACTIVE_IND}",
                                "Event": "${/Event}"
                          }

                          """
                          rule {
                              class: "bundle.process.rules.JsonRegexRule"
                              selector: "/alert"
                              patterns: ["Y"]
                              matching: "NONE"
                              missing.policy: "DISCARD"
                          }

                      }


                      ]

                  }

                  //-------------------------------------------------------------------------------------------------------------------


        ]

   sink
      {
         name: "logging-sink"
         class: "bundle.factory.LoggingSinkFactory"
         level: "INFO"
     }
   trace {
     enabled:false
   }
  }
